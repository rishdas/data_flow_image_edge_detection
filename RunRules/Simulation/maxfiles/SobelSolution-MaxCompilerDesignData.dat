#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "SobelSolution"
#define MAXFILE_BUILD_DIR  "/tmp/SobelSolution_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20161207
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 39)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "SobelSolutionKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(SobelSolutionKernel, Kernel)
MANAGER_NODE(inImage, PCIe_From_Host_fwd)
MANAGER_NODE(outImage, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(SobelSolutionKernel, inImage, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(SobelSolutionKernel, outImage, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inImage, inImage, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(outImage, outImage, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inImage, inImage, Stream_1, input, 128)
MANAGER_STREAM(SobelSolutionKernel, outImage, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, outImage, outImage, 128)
MANAGER_STREAM(Stream_10, output, SobelSolutionKernel, inImage, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(SobelSolutionKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(inImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(outImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(SobelSolutionKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(SobelSolutionKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(SobelSolutionKernel, SobelSolutionKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(SobelSolutionKernel, inImage, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(SobelSolutionKernel, outImage, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage, PCIePullSourceSyncMax3, "inImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(SobelSolutionKernel, SobelSolutionKernel, "SobelSolutionKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage, PCIePushSinkSyncMax3, "outImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 39)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "6c17b965656a0f47475bc92561e24224fa2b0f9a9292a3def9254c6ce82a7d57")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_fill_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_flush_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_flush_start_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_full_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelSolutionKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inImage, STREAM_FROM_HOST, 0)
PCIE_STREAM(outImage, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(SobelSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelSolutionKernel.io_outImage_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelSolutionKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(SobelSolutionKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(SobelSolutionKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(SobelSolutionKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_fill_level, 0x15, 2, hwBits(10))
REG(SobelSolutionKernel.dbg_flush_level, 0x17, 2, hwBits(10))
REG(SobelSolutionKernel.dbg_flush_start, 0x19, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_flush_start_level, 0x1a, 2, hwBits(10))
REG(SobelSolutionKernel.dbg_flushing, 0x1c, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_full_level, 0x1d, 2, hwBits(10))
REG(SobelSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1))
REG(SobelSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(SobelSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelSolutionKernel.io_outImage_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelSolutionKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(SobelSolutionKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_fill_level, 0x15, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_flush_level, 0x17, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_flush_start, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_flush_start_level, 0x1a, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_flushing, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_full_level, 0x1d, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("6c17b965656a0f47475bc92561e24224fa2b0f9a9292a3def9254c6ce82a7d57")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME SobelSolution
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_SobelSolution_H
#define SLIC_DECLARATIONS_SobelSolution_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define SobelSolution_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] instream_inImage The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_size * 4) bytes.
 */
void SobelSolution(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] instream_inImage The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_size * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *SobelSolution_nonblock(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_size; /**<  [in] Interface Parameter "size". */
	const int32_t *instream_inImage; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	int32_t *outstream_outImage; /**<  [out] The stream should be of size (param_size * 4) bytes. */
} SobelSolution_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void SobelSolution_run(
	max_engine_t *engine,
	SobelSolution_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelSolution_run_nonblock(
	max_engine_t *engine,
	SobelSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void SobelSolution_run_group(max_group_t *group, SobelSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelSolution_run_group_nonblock(max_group_t *group, SobelSolution_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void SobelSolution_run_array(max_engarray_t *engarray, SobelSolution_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelSolution_run_array_nonblock(max_engarray_t *engarray, SobelSolution_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* SobelSolution_convert(max_file_t *maxfile, SobelSolution_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* SobelSolution_init(void);

/* Error handling functions */
int SobelSolution_has_errors(void);
const char* SobelSolution_get_errors(void);
void SobelSolution_clear_errors(void);
/* Free statically allocated maxfile data */
void SobelSolution_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int SobelSolution_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int SobelSolution_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_SobelSolution_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(SobelSolutionKernel, 79, NodeInputMappedReg, "Scalar input (io_outImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:47)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 80, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:47)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 0, NodeInputMappedReg, "Scalar input (io_inImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:24)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:24)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 2, NodeInput, "Input(inImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:24)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 104, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 139, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 11, NodeStreamOffset, "stream offset: 257", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 140, NodeFIFO, "FIFO(241)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 141, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 142, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 143, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 144, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 145, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 146, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 147, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 148, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 149, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 150, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 71, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 166, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 73, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 74, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 97, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 75, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 10, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 64, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 165, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 66, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 67, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 100, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 68, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 151, NodeFIFO, "FIFO(241)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 152, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 9, NodeStreamOffset, "stream offset: -255", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 57, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 164, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 59, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 60, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 103, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 61, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 132, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 8, NodeStreamOffset, "stream offset: 256", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 50, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 163, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 52, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 53, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 106, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 54, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 43, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 162, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 45, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 46, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 109, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 47, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 6, NodeStreamOffset, "stream offset: -256", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 36, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 161, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 38, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 39, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 112, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 40, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 5, NodeStreamOffset, "stream offset: 255", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 29, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 160, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 31, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 32, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 114, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 33, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 4, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 22, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 159, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 24, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 25, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 117, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 26, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 3, NodeStreamOffset, "stream offset: -257", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:30)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 15, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:38)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 158, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 17, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:753)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 18, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 120, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 19, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:39)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 156, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:86)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:32)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 20, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 157, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:86)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:32)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 121, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 21, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 27, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 122, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 123, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 28, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 34, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 124, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 125, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 35, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 41, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 126, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 127, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 42, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 48, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 128, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 129, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 49, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 55, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 130, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 131, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 56, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 62, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 133, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 153, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 63, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 69, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 135, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 136, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 70, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 76, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 137, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 138, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 77, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:40)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 82, NodeOutput, "Output(outImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobel.SobelSolutionKernel.<init>(SobelSolutionKernel.maxj:47)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 87, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 155, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 84, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 85, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 86, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 88, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 154, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 90, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 91, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 93, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 94, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(SobelSolutionKernel, 92, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobel.SobelSolutionManager.main(SobelSolutionManager.maxj:27)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int SobelSolution_has_errors(void)
{	return stored_has_error; }
const char* SobelSolution_get_errors(void)
{	return stored_error; }
void SobelSolution_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char SobelSolution_use_simulation[16];
static void SobelSolution_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(SobelSolution_use_simulation, 16, "SobelSol_%05ld_", pid);
}
static const char *SobelSolution_check_use_simulation(void)
{
	SobelSolution_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = SobelSolution_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int SobelSolution_simulation_launch = 0;
int SobelSolution_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = SobelSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int SobelSolution_simulator_stop(void)
{
	const char *use_sim = SobelSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void SobelSolution_static_init(void) 
{
	stored_maxfile = SobelSolution_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = SobelSolution_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = SobelSolution_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			SobelSolution_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void SobelSolution_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (SobelSolution_simulation_launch == 1) {
		int sim_stat = SobelSolution_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		SobelSolution_simulation_launch = 0;
	}
}

static int SobelSolution_get_pcie_alignment(void)
{
#ifdef SobelSolution_PCIE_ALIGNMENT
	return ((SobelSolution_PCIE_ALIGNMENT < 1) ? 16 : SobelSolution_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int SobelSolution_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = SobelSolution_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *SobelSolution_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = SobelSolution_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct SobelSolution_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} SobelSolution_callback_stream_t;

typedef struct SobelSolution_callback_data {
	SobelSolution_callback_stream_t stream[2]; 
	int count;
	int max_count;
} SobelSolution_callback_data_t;

static void SobelSolution_callback_internal(void *cb_data)
{
	SobelSolution_callback_data_t *data = (SobelSolution_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		SobelSolution_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* SobelSolution_convert_internal(
	max_file_t *maxfile,
	SobelSolution_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	SobelSolution_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(SobelSolution_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function SobelSolution_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &SobelSolution_callback_internal;
	}

	int32_t param_size = interface_actions->param_size;
	
	/* code for scalar SobelSolutionKernel.run_cycle_count */
	uint64_t ticks_SobelSolutionKernel = param_size;
	max_set_ticks(actions, "SobelSolutionKernel", param_size);
	CHECK_ERRORS;
	/* end of code for scalar SobelSolutionKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_size * 4);
	
	/* code for stream inImage */
	size_t instream_size_inImage = tmp_0;
	if (instream_size_inImage > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage;
		if (use_callback && (1 == SobelSolution_check_aligned(interface_actions->instream_inImage))) {
			int32_t *aligned_instream_inImage = malloc(instream_size_inImage);
			if (aligned_instream_inImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage, interface_actions->instream_inImage, instream_size_inImage);
			stream_ptr = aligned_instream_inImage;
		}
		max_queue_input(actions, "inImage", stream_ptr, instream_size_inImage);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage */
	
	int64_t tmp_1 = (param_size * 4);
	
	/* code for stream outImage */
	size_t outstream_size_outImage = tmp_1;
	if (outstream_size_outImage > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage;
		if (use_callback && (1 == SobelSolution_check_aligned(interface_actions->outstream_outImage))) {
			int32_t *aligned_outstream_outImage = malloc(outstream_size_outImage);
			if (aligned_outstream_outImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage;
		}
		max_queue_output(actions, "outImage", stream_ptr, outstream_size_outImage);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void SobelSolution(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	(void) pthread_once(&slic_bs_is_initialised, SobelSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = SobelSolution_nonblock(param_size, instream_inImage, outstream_outImage);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *SobelSolution_nonblock(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	SobelSolution_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.instream_inImage = instream_inImage;
	interface_actions.outstream_outImage = outstream_outImage;
	(void) pthread_once(&slic_bs_is_initialised, SobelSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = SobelSolution_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void SobelSolution_run(
	max_engine_t *engine,
	SobelSolution_actions_t *interface_actions)
{
	max_run_t *run = SobelSolution_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *SobelSolution_run_nonblock(
	max_engine_t *engine,
	SobelSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = SobelSolution_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void SobelSolution_run_group(max_group_t *group, SobelSolution_actions_t *interface_actions)
{
	max_run_t *run = SobelSolution_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelSolution_run_group_nonblock(max_group_t *group, SobelSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = SobelSolution_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void SobelSolution_run_array(max_engarray_t *engarray, SobelSolution_actions_t *interface_actions[])
{
	max_run_t *run = SobelSolution_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelSolution_run_array_nonblock(max_engarray_t *engarray, SobelSolution_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = SobelSolution_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* SobelSolution_convert(max_file_t *maxfile, SobelSolution_actions_t *interface_actions)
{
	return SobelSolution_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, size, param_size)	
SLIC_SET_TICKS(SobelSolutionKernel, param_size)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_size * 4);)	
SLIC_STREAM(inImage, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_size * 4);)	
SLIC_STREAM(outImage, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlNvYmVsU29sdXRpb24uaCIg
bmFtZT0iU29iZWxTb2x1dGlvbiI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBl
PSJsb25nIiB2YWx1ZT0iMTYiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24g
bmFtZT0iU29iZWxTb2x1dGlvbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9Iklu
dGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7c2l6ZSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5h
bWU9InBhcmFtX3NpemUiIHR5cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBz
aG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fc2l6ZSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1
dCIgbmFtZT0iaW5zdHJlYW1faW5JbWFnZSIgc2l6ZT0iKHBhcmFtX3NpemUgKiA0KSIgdHJhbnNw
b3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxm
dW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJh
bV9zaXplICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0
b3I9IioiIHZhbHVlPSIocGFyYW1fc2l6ZSAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9z
aXplIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48
L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJU
aGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9zaXplICogNCkgYnl0ZXMuIiBkaXJl
Y3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291dEltYWdlIiBzaXplPSIocGFyYW1fc2l6
ZSAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9
IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8i
IHZhbHVlPSIoKHBhcmFtX3NpemUgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlP
cGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9zaXplICogNCkiPjx1c2VyUGFyYW0g
dmFsdWU9InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5
T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJp
bmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+
PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBTb2JlbFNvbHV0aW9uX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hh
c19lcnJvcjsgfQpjb25zdCBjaGFyKiBTb2JlbFNvbHV0aW9uX2dldF9lcnJvcnModm9pZCkKewly
ZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgU29iZWxTb2x1dGlvbl9jbGVhcl9lcnJvcnModm9p
ZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9o
YXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBTb2JlbFNvbHV0aW9uX3VzZV9zaW11bGF0aW9u
WzE2XTsKc3RhdGljIHZvaWQgU29iZWxTb2x1dGlvbl9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkK
ewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBpZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKFNvYmVs
U29sdXRpb25fdXNlX3NpbXVsYXRpb24sIDE2LCAiU29iZWxTb2xfJTA1bGRfIiwgcGlkKTsKfQpz
dGF0aWMgY29uc3QgY2hhciAqU29iZWxTb2x1dGlvbl9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lk
KQp7CglTb2JlbFNvbHV0aW9uX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNl
X3NpbSA9IG1heF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsK
CWlmICh1c2Vfc2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gU29iZWxTb2x1dGlvbl91c2Vfc2lt
dWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElP
TiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBTb2JlbFNvbHV0
aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IFNvYmVsU29sdXRpb25fc2ltdWxhdG9yX3N0
YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFNvYmVs
U29sdXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJp
bnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEg
LW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAq
cGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3Ry
bmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikp
KTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYs
IDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2lt
dWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJ
CWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2
YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQg
U29iZWxTb2x1dGlvbl9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2lt
ID0gU29iZWxTb2x1dGlvbl9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRd
OwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJz
aW0gLWQgMSAtbiAlcyAtYyBNQVgzNDI0QSAtUyBzaW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglG
SUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIiKTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsK
CQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8gZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihi
dWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQlyZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMo
YnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkgewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdl
dCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8KCQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7
ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIFNv
YmVsU29sdXRpb25fc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gU29iZWxT
b2x1dGlvbl9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0
b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1h
eF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VS
Uk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxl
Iik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNl
dF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsK
CQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4Zmls
ZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91
dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFNvYmVsU29sdXRp
b25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21h
eGZpbGUsIHVzZV9zaW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBTb2JlbFNvbHV0aW9uX3Np
bXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1v
bihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJU29iZWxTb2x1dGlvbl9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBTb2JlbFNvbHV0aW9uX2ZyZWUodm9pZCkK
ewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVkX2VuZ2lu
ZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUgIT0gTlVM
TCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhmaWxlID0g
TlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVkX2Vycm9y
KTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKFNvYmVsU29sdXRpb25fc2ltdWxhdGlv
bl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFNvYmVsU29sdXRpb25fc2ltdWxhdG9y
X3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJFcnJv
ciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCVNvYmVsU29sdXRpb25fc2ltdWxhdGlvbl9s
YXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IFNvYmVsU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25t
ZW50KHZvaWQpCnsKI2lmZGVmIFNvYmVsU29sdXRpb25fUENJRV9BTElHTk1FTlQKCXJldHVybiAo
KFNvYmVsU29sdXRpb25fUENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogU29iZWxTb2x1dGlvbl9Q
Q0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFNv
YmVsU29sdXRpb25fY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gU29iZWxTb2x1dGlv
bl9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkgPyAx
IDogMDsKfQoKc3RhdGljIHZvaWQgKlNvYmVsU29sdXRpb25fbWFsbG9jX2FsaWduZWQoY29uc3Qg
c2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBTb2JlbFNvbHV0aW9u
X2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBz
aXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoKI2RlZmluZSBDSEVDS19F
UlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkgeyBpZihtYXhfY29uZmln
X2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsg
ZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IGFi
b3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykp
OyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUsIE1FU1NBR0UsIFJFVCkg
aWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiVz
XG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRfZXJyb3IsIE1FU1NBR0Up
OyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJFVDsgfQoKIAp0eXBlZGVm
IHN0cnVjdCBTb2JlbFNvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbSB7Cgl1aW50OF90ICp1c2VyX3B0
cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAgc2l6ZTsKCWludCAgICAgIGlzX291
dHB1dDsKfSBTb2JlbFNvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3Qg
U29iZWxTb2x1dGlvbl9jYWxsYmFja19kYXRhIHsKCVNvYmVsU29sdXRpb25fY2FsbGJhY2tfc3Ry
ZWFtX3Qgc3RyZWFtWzJdOyAKCWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gU29iZWxTb2x1
dGlvbl9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBTb2JlbFNvbHV0aW9uX2NhbGxiYWNr
X2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCVNvYmVsU29sdXRpb25fY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKFNvYmVsU29sdXRpb25fY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAo
aW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCVNvYmVsU29sdXRpb25fY2Fs
bGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19vdXRwdXQg
JiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWduZWRfcHRy
LCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRhdGEpOwp9
CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogU29iZWxTb2x1dGlvbl9jb252ZXJ0X2ludGVybmFsKAoJ
bWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCVNvYmVsU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYyko
dm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMg
PSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSBy
ZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJv
cnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJU29iZWxTb2x1dGlvbl9jYWxsYmFja19kYXRhX3QgKmNi
X2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxsYmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwp
ICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwpOwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2Rh
dGEgPSBtYWxsb2Moc2l6ZW9mKFNvYmVsU29sdXRpb25fY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYg
KGNiX2RhdGEgPT0gTlVMTCkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0
ZSBtZW1vcnkgZm9yIHN0cmVhbSBjYWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIFNvYmVsU29sdXRp
b25fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5t
YXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEg
ICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmU29iZWxTb2x1dGlvbl9jYWxs
YmFja19pbnRlcm5hbDsKCX0KCglpbnQzMl90IHBhcmFtX3NpemUgPSBpbnRlcmZhY2VfYWN0aW9u
cy0+cGFyYW1fc2l6ZTsKCQoJLyogY29kZSBmb3Igc2NhbGFyIFNvYmVsU29sdXRpb25LZXJuZWwu
cnVuX2N5Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19Tb2JlbFNvbHV0aW9uS2VybmVsID0g
cGFyYW1fc2l6ZTsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIlNvYmVsU29sdXRpb25LZXJuZWwi
LCBwYXJhbV9zaXplKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
U29iZWxTb2x1dGlvbktlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCglpbnQ2NF90IHRtcF8wID0g
KHBhcmFtX3NpemUgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGluSW1hZ2UgKi8KCXNpemVf
dCBpbnN0cmVhbV9zaXplX2luSW1hZ2UgPSB0bXBfMDsKCWlmIChpbnN0cmVhbV9zaXplX2luSW1h
Z2UgPiAwKSB7CgkJY29uc3QgaW50MzJfdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25z
LT5pbnN0cmVhbV9pbkltYWdlOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gU29iZWxTb2x1
dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbkltYWdlKSkp
IHsKCQkJaW50MzJfdCAqYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlID0gbWFsbG9jKGluc3RyZWFt
X3NpemVfaW5JbWFnZSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UgPT0gTlVMTCkg
ewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9f
TElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVh
bSAnaW5JbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVh
bVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2Fj
dGlvbnMtPmluc3RyZWFtX2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2U7
CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5z
dHJlYW1fc2l6ZV9pbkltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGln
bmVkX2luc3RyZWFtX2luSW1hZ2UsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbkltYWdl
LCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVh
bV9pbkltYWdlOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImluSW1hZ2UiLCBzdHJl
YW1fcHRyLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVu
ZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5JbWFnZSAqLwoJCglpbnQ2NF90IHRtcF8xID0gKHBhcmFt
X3NpemUgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIG91dEltYWdlICovCglzaXplX3Qgb3V0
c3RyZWFtX3NpemVfb3V0SW1hZ2UgPSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6ZV9vdXRJbWFn
ZSA+IDApIHsKCQlpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0
cmVhbV9vdXRJbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFNvYmVsU29sdXRpb25f
Y2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dEltYWdlKSkpIHsK
CQkJaW50MzJfdCAqYWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2UgPSBtYWxsb2Mob3V0c3RyZWFt
X3NpemVfb3V0SW1hZ2UpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2UgPT0gTlVM
TCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18s
IF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0
cmVhbSAnb3V0SW1hZ2UnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFj
ZV9hY3Rpb25zLT5vdXRzdHJlYW1fb3V0SW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9v
dXRJbWFnZTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAg
ICAgPSBvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0
YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlz
dHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2U7CgkJfQoJCW1heF9xdWV1ZV9v
dXRwdXQoYWN0aW9ucywgIm91dEltYWdlIiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfb3V0
SW1hZ2UpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gb3V0
SW1hZ2UgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJ
KmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNi
X2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBT
b2JlbFNvbHV0aW9uKAoJaW50MzJfdCBwYXJhbV9zaXplLAoJY29uc3QgaW50MzJfdCAqaW5zdHJl
YW1faW5JbWFnZSwKCWludDMyX3QgKm91dHN0cmVhbV9vdXRJbWFnZSkKewoJKHZvaWQpIHB0aHJl
YWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgU29iZWxTb2x1dGlvbl9zdGF0aWNfaW5p
dCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIs
ICk7CgltYXhfcnVuX3QgKnJ1biA9IFNvYmVsU29sdXRpb25fbm9uYmxvY2socGFyYW1fc2l6ZSwg
aW5zdHJlYW1faW5JbWFnZSwgb3V0c3RyZWFtX291dEltYWdlKTsKCUNIRUNLX05VTEwocnVuLCAi
VW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAq
U29iZWxTb2x1dGlvbl9ub25ibG9jaygKCWludDMyX3QgcGFyYW1fc2l6ZSwKCWNvbnN0IGludDMy
X3QgKmluc3RyZWFtX2luSW1hZ2UsCglpbnQzMl90ICpvdXRzdHJlYW1fb3V0SW1hZ2UpCnsKCVNv
YmVsU29sdXRpb25fYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fc2l6ZSA9IHBhcmFtX3NpemU7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9p
bkltYWdlID0gaW5zdHJlYW1faW5JbWFnZTsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV9v
dXRJbWFnZSA9IG91dHN0cmVhbV9vdXRJbWFnZTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIFNvYmVsU29sdXRpb25fc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVM
TChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQg
KCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gU29iZWxTb2x1dGlvbl9jb252ZXJ0X2ludGVybmFs
KHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0
YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwp
OwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwp
OwoJQ0hFQ0tfRVJST1JTX1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47
CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRf
ZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRo
X2NiKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tf
TlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19T
VChhY3Rpb25zLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVu
Owp9Cgp2b2lkIFNvYmVsU29sdXRpb25fcnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglTb2Jl
bFNvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVu
ID0gU29iZWxTb2x1dGlvbl9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7
CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChy
dW4pOwp9CgptYXhfcnVuX3QgKlNvYmVsU29sdXRpb25fcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2lu
ZV90ICplbmdpbmUsCglTb2JlbFNvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMp
CnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUp
OyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAg
ICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gU29iZWxTb2x1dGlvbl9jb252ZXJ0
X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2Rh
dGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxM
KTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxM
KTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9y
dW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9u
b25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglD
SEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJbWF4X2FjdGlv
bnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1
biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgog
KiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0g
aW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYWN0aW9ucyBv
biB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2b2lkIFNvYmVs
U29sdXRpb25fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgU29iZWxTb2x1dGlvbl9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IFNvYmVsU29sdXRp
b25fcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19O
VUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoK
LyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5j
dGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUg
YWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3Vw
IGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJl
IGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dh
aXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICog
c2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBl
eHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFy
YW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhh
bmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBj
YXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpTb2JlbFNvbHV0aW9uX3J1bl9ncm91cF9ub25i
bG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIFNvYmVsU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2Zp
bGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFNvYmVsU29sdXRpb25fY29udmVy
dF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7Cglp
ZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJv
cnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVu
ID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19m
cmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFk
dmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAog
KiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxw
YXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBy
dW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5l
cy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6
ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgU29iZWxTb2x1dGlvbl9ydW5fYXJyYXkobWF4X2VuZ2Fy
cmF5X3QgKmVuZ2FycmF5LCBTb2JlbFNvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBTb2JlbFNvbHV0aW9uX3J1bl9hcnJheV9ub25ibG9j
ayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUg
dG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJy
YXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRl
cmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBh
Y3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5Lgog
KiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2Yg
ZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIg
YnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2Ug
Km11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFz
ZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVz
ZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMg
dG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRo
ZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKlNvYmVs
U29sdXRpb25fcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgU29i
ZWxTb2x1dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3Qg
Km1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBp
OwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwg
ZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4
X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9m
KG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsr
ICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBTb2JlbFNvbHV0aW9uX2NvbnZlcnRfaW50
ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlm
IChhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9u
czsKCQltYXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3Qg
KnJ1biA9IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAo
IGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFy
cl9hY3Rpb25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJf
YWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRp
Yy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2Fj
dGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxp
dHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZh
Y2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFy
YW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMg
dG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwg
b3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogU29iZWxTb2x1dGlv
bl9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIFNvYmVsU29sdXRpb25fYWN0aW9uc190ICpp
bnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIFNvYmVsU29sdXRpb25fY29udmVydF9pbnRlcm5h
bChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBD
SEVDS19FUlJPUlNfU1QKI3VuZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 80, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 144, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 149, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 166, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 151, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 152, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 161, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 120, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 153, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 155, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelSolutionKernel, 92, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c021427a71e525be39184fd077c2fc8b88351d0266490021465dfa1edd87ca46d4c1cf88d35c5fc9d5b56cbf1")
#endif

